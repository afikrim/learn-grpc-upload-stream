// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: api/v1/service.proto

package pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	UploadStreamV1_UploadFile_FullMethodName = "/api.v1.UploadStreamV1/UploadFile"
)

// UploadStreamV1Client is the client API for UploadStreamV1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UploadStreamV1Client interface {
	UploadFile(ctx context.Context, opts ...grpc.CallOption) (UploadStreamV1_UploadFileClient, error)
}

type uploadStreamV1Client struct {
	cc grpc.ClientConnInterface
}

func NewUploadStreamV1Client(cc grpc.ClientConnInterface) UploadStreamV1Client {
	return &uploadStreamV1Client{cc}
}

func (c *uploadStreamV1Client) UploadFile(ctx context.Context, opts ...grpc.CallOption) (UploadStreamV1_UploadFileClient, error) {
	stream, err := c.cc.NewStream(ctx, &UploadStreamV1_ServiceDesc.Streams[0], UploadStreamV1_UploadFile_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &uploadStreamV1UploadFileClient{stream}
	return x, nil
}

type UploadStreamV1_UploadFileClient interface {
	Send(*UploadFileRequest) error
	CloseAndRecv() (*UploadFileResponse, error)
	grpc.ClientStream
}

type uploadStreamV1UploadFileClient struct {
	grpc.ClientStream
}

func (x *uploadStreamV1UploadFileClient) Send(m *UploadFileRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *uploadStreamV1UploadFileClient) CloseAndRecv() (*UploadFileResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(UploadFileResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UploadStreamV1Server is the server API for UploadStreamV1 service.
// All implementations should embed UnimplementedUploadStreamV1Server
// for forward compatibility
type UploadStreamV1Server interface {
	UploadFile(UploadStreamV1_UploadFileServer) error
}

// UnimplementedUploadStreamV1Server should be embedded to have forward compatible implementations.
type UnimplementedUploadStreamV1Server struct {
}

func (UnimplementedUploadStreamV1Server) UploadFile(UploadStreamV1_UploadFileServer) error {
	return status.Errorf(codes.Unimplemented, "method UploadFile not implemented")
}

// UnsafeUploadStreamV1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UploadStreamV1Server will
// result in compilation errors.
type UnsafeUploadStreamV1Server interface {
	mustEmbedUnimplementedUploadStreamV1Server()
}

func RegisterUploadStreamV1Server(s grpc.ServiceRegistrar, srv UploadStreamV1Server) {
	s.RegisterService(&UploadStreamV1_ServiceDesc, srv)
}

func _UploadStreamV1_UploadFile_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(UploadStreamV1Server).UploadFile(&uploadStreamV1UploadFileServer{stream})
}

type UploadStreamV1_UploadFileServer interface {
	SendAndClose(*UploadFileResponse) error
	Recv() (*UploadFileRequest, error)
	grpc.ServerStream
}

type uploadStreamV1UploadFileServer struct {
	grpc.ServerStream
}

func (x *uploadStreamV1UploadFileServer) SendAndClose(m *UploadFileResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *uploadStreamV1UploadFileServer) Recv() (*UploadFileRequest, error) {
	m := new(UploadFileRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// UploadStreamV1_ServiceDesc is the grpc.ServiceDesc for UploadStreamV1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UploadStreamV1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.v1.UploadStreamV1",
	HandlerType: (*UploadStreamV1Server)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UploadFile",
			Handler:       _UploadStreamV1_UploadFile_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "api/v1/service.proto",
}
